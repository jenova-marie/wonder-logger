# Wonder Logger Development Configuration
#
# This is the WORKING configuration file for developing and testing Wonder Logger itself.
# Unlike wonder-logger.example.yaml (which is a template for users), this file is used
# for actual library development and E2E testing.
#
# IMPORTANT: This file references environment variables from .env (which is gitignored).
# Make sure to copy .env.example to .env and fill in your values.

# =============================================================================
# Service Metadata
# =============================================================================
service:
  # Use environment variables from .env for flexibility
  name: ${SERVICE_NAME:-wonder-logger-dev}
  version: ${SERVICE_VERSION:-1.0.6}
  environment: ${NODE_ENV:-development}

# =============================================================================
# Logger Configuration
# =============================================================================
logger:
  enabled: true

  # Debug level for development
  level: ${LOG_LEVEL:-debug}

  # Redact sensitive fields
  redact:
    - password
    - token
    - apiKey
    - secret
    - OPENAI_API_KEY
    - ANTHROPIC_API_KEY

  # Development transports
  transports:
    # Pretty console output for local development
    - type: console
      pretty: true
      level: debug
      prettyOptions:
        colorize: true
        translateTime: 'HH:MM:ss'
        ignore: 'pid,hostname'
        singleLine: false

    # File transport for persistent logs
    - type: file
      dir: ./logs
      fileName: dev.log
      level: debug
      mkdir: true
      sync: false

    # OTEL transport for E2E testing
    - type: otel
      endpoint: ${OTEL_LOGS_ENDPOINT:-http://localhost:4318/v1/logs}
      level: info
      exportIntervalMillis: 5000

  # Enable all plugins for development
  plugins:
    traceContext: true
    morganStream: true

# =============================================================================
# OpenTelemetry Configuration
# =============================================================================
otel:
  enabled: true

  # Distributed Tracing
  tracing:
    enabled: true

    # Use console exporter for local dev, OTLP for E2E tests
    exporter: ${OTEL_TRACE_EXPORTER:-console}

    # OTLP endpoint (uses environment variable with fallback)
    endpoint: ${OTEL_TRACES_ENDPOINT:-http://localhost:4318/v1/traces}

    # Full sampling for development (capture everything)
    sampleRate: 1.0

  # Metrics Configuration
  metrics:
    enabled: true

    # Multiple exporters for comprehensive testing
    exporters:
      # Prometheus scrape endpoint for local development
      - type: prometheus
        port: ${PROMETHEUS_PORT:-9464}

      # OTLP push for E2E testing
      - type: otlp
        endpoint: ${OTEL_METRICS_ENDPOINT:-http://localhost:4318/v1/metrics}
        exportIntervalMillis: 30000  # 30s for faster dev feedback

    # Global export interval
    exportIntervalMillis: 30000

  # Auto-instrumentation (all features enabled)
  instrumentation:
    auto: true
    http: true
